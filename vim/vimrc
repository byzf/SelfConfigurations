""" " Settings
if &compatible
	set nocompatible
endif

set backspace=indent,eol,start
set history=200
set nobackup
set display=truncate
set noshowmode
set belloff=backspace,cursor,complete,esc,error
set vb t_vb=\|200f
set cursorline cursorlineopt=number
set linespace=2
set pythonthreedll=python38.dll
set clipboard=unnamed
set laststatus=2

set encoding=utf-8
set nu
set title
set nowrap
set ruler
set showcmd
set wildmenu
set shiftwidth=4 tabstop=4 softtabstop=0 smarttab noexpandtab
set incsearch ignorecase smartcase hlsearch
set shortmess+=c
set completeopt=menu,preview

""""" Packages
call plug#begin('~/vimfiles/.cache')
" colorschemes
Plug 'alessandroyorba/alduin'
Plug 'alessandroyorba/despacio'
Plug 'morhetz/gruvbox'
Plug 'jonathanfilip/vim-lucius'
Plug 'wolf-dog/nighted.vim'
Plug 'rakr/vim-one'
" apperance
Plug 'itchyny/lightline.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'mhinz/vim-startify'
" function
Plug 'majutsushi/tagbar', { 'on' : 'TagbarToggle' }
Plug 'scrooloose/nerdtree',{ 'on':  'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'brooth/far.vim'
" complete
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'thomasfaingnaert/vim-lsp-ultisnips'
Plug 'SirVer/ultisnips'
" helper
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tommcdo/vim-lion'
Plug 'wellle/targets.vim'
Plug 'michaeljsmith/vim-indent-object'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'lfv89/vim-interestingwords'
" language
Plug 'fatih/vim-go'

call plug#end()

""""" Coloscheme
colorscheme lucius
""""" Lightline
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ }
""""" Tabgar
nnoremap <silent> <F8> :TagbarToggle<CR>
""""" NerdTree
nnoremap <silent> <F12> :NERDTreeToggle<CR>

""""" WebSearch
function! WebSearch(type, ...)
  let sel_save = &selection
  let &selection = "inclusive"
  let reg_save = @@

  if a:0  " Invoked from Visual mode, use '< and '> marks.
    silent exe "normal! `<" . a:type . "`>y"
  elseif a:type == 'line'
    silent exe "normal! '[V']y"
  elseif a:type == 'block'
    silent exe "normal! `[\<C-V>`]y"
  else
    silent exe "normal! `[v`]y"
  endif

  let search = substitute(trim(@@), ' \+', '+', 'g')
  silent exe "!firefox --new-tab 'https://duckduckgo.com/?q=" . search . "'"

  let &selection = sel_save
  let @@ = reg_save
endfunction
nmap <silent> gs :set opfunc=WebSearch<CR>g@
vmap <silent> gs :<C-u>call WebSearch(visualmode(), 1)<Cr>
